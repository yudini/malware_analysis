

import os
import itertools
import pefile
import matplotlib.pyplot as plt
import seaborn as sns

def jaccard(set1,set2):
    """
    Compute the Jaccard distance between two sets by taking
    their intersection, union and then dividing the number
    of elements in the intersection by the number of elements
    in their union.
    """
    intersection = set1.intersection(set2)
    intersection_length = float(len(intersection))
    union = set1.union(set2)
    union_length = float(len(union))
    return intersection_length / union_length

def pecheck(fullpath):
    """
    Do a cursory sanity check to make sure 'fullpath' is
    a Windows PE executable (PE executables start with the
    two bytes 'MZ')
    """
    f = open(fullpath,"rb")
    bytes = f.read(2)
    return bytes == b'MZ'


def getiat(fullpath):  #get import address table in PE
    iat = set()
    pe=pefile.PE(fullpath)
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        iat.add(entry.dll)

    return iat

malware_paths = []  # where we'll store the malware file paths
malware_attributes = dict()  # where we'll store the malware strings

print(os.walk('./data'))
for root, dirs, paths in os.walk('./data'):
    for path in paths:
        full_path = os.path.join(root, path)
        malware_paths.append(full_path)

malware_paths = list(filter(pecheck, malware_paths))

for file in malware_paths:
    attributes = getiat(file)
    malware_attributes[file] = attributes

similarity = dict()

for malware1,malware2 in itertools.product(malware_paths, repeat=2):

    jaccard_index = jaccard(malware_attributes[malware1], malware_attributes[malware2])

    if malware1 in similarity.keys():
        similarity[malware1][malware2] = jaccard_index
    else:
        similarity[malware1] = dict()
        similarity[malware1][malware2] = jaccard_index

data=[] # we'll use it in matrix
paths=[] # we 'll use it in matrix's index and columns

for key,values in similarity.items():
    paths=list(key)
    index=list(values.values())
    data.append(index)

sns.heatmap(data,cmap="Greys")
plt.savefig('matrix.jpg')