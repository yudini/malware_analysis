


import os
import itertools
import pefile


import matplotlib

import matplotlib.pyplot as plt
import seaborn as sns

import numpy as np


def jaccard(set1,set2):
    """
    Compute the Jaccard distance between two sets by taking
    their intersection, union and then dividing the number
    of elements in the intersection by the number of elements
    in their union.
    """
    intersection = set1.intersection(set2)
    intersection_length = float(len(intersection))
    union = set1.union(set2)
    union_length = float(len(union))
    return intersection_length / union_length

def pecheck(fullpath):
    """
    Do a cursory sanity check to make sure 'fullpath' is
    a Windows PE executable (PE executables start with the
    two bytes 'MZ')
    """
    f = open(fullpath,"rb")
    bytes = f.read(2)
    return bytes == b'MZ'
    # print(bytes)
    # # return open(fullpath).read(2) == "MZ"

def getIAT(fullpath):
    iat = set()
    pe=pefile.PE(fullpath)
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        iat.add(entry.dll)

    return iat

def getstrings(fullpath):
    """
    Extract strings from the binary indicated by the 'fullpath'
    parameter, and then return the set of unique strings in
    the binary.
    """
    strings = os.popen("strings '{0}'".format(fullpath)).read()
    strings = set(strings.split("\n"))
    return strings

malware_paths = []  # where we'll store the malware file paths
malware_attributes = dict()  # where we'll store the malware strings

print(os.walk('./data'))
for root, dirs, paths in os.walk('./data/malware'):
    for path in paths:
        full_path = os.path.join(root, path)
        malware_paths.append(full_path)

malware_paths = list(filter(pecheck, malware_paths))

for file in malware_paths:
    attributes = getstrings(file)
    #attributes = getIAT(file)
    # print("Extracted {0} attributes from {1} ...".format(len(attributes), file))
    malware_attributes[file] = attributes
    # print(attributes)
#
similarity = []
for file1 in malware_paths:
    tmp=[]
    for file2 in malware_paths:
        tmp.append(jaccard(malware_attributes[file1],malware_attributes[file2]))
    similarity.append(tmp)

sns.heatmap(similarity,cmap="Greys")
plt.savefig('example.jpg')


