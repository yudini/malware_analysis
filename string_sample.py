


import os
import itertools



def jaccard(set1,set2):
    """
    Compute the Jaccard distance between two sets by taking
    their intersection, union and then dividing the number
    of elements in the intersection by the number of elements
    in their union.
    """
    intersection = set1.intersection(set2)
    intersection_length = float(len(intersection))
    union = set1.union(set2)
    union_length = float(len(union))
    return intersection_length / union_length

def pecheck(fullpath):
    """
    Do a cursory sanity check to make sure 'fullpath' is
    a Windows PE executable (PE executables start with the
    two bytes 'MZ')
    """
    f = open(fullpath,"rb")
    bytes = f.read(2)
    return bytes == b'MZ'
    # print(bytes)
    # # return open(fullpath).read(2) == "MZ"


def getstrings(fullpath):
    """
    Extract strings from the binary indicated by the 'fullpath'
    parameter, and then return the set of unique strings in
    the binary.
    """
    strings = os.popen("strings '{0}'".format(fullpath)).read()
    strings = set(strings.split("\n"))
    return strings

malware_paths = []  # where we'll store the malware file paths
malware_attributes = dict()  # where we'll store the malware strings

print(os.walk('./data'))
for root, dirs, paths in os.walk('./data'):
    for path in paths:
        full_path = os.path.join(root, path)
        malware_paths.append(full_path)

malware_paths = list(filter(pecheck, malware_paths))

for file in malware_paths:
    # attributes = getstrings(file)
    attributes = getstrings(file)
    # print("Extracted {0} attributes from {1} ...".format(len(attributes), file))
    malware_attributes[file] = attributes
    # print(attributes)
#
similarity = dict()
for malware1,malware2 in itertools.combinations(malware_paths,2):
    #print(malware1)

    jaccard_index = jaccard(malware_attributes[malware1], malware_attributes[malware2])
    print(malware1,malware2,jaccard_index)
    if malware1 in similarity.keys():
        similarity[malware1][malware2] = jaccard_index
    else:
        similarity[malware1] = dict()
        similarity[malware1][malware2] = jaccard_index

#for val in similarity.values():
    # print(val.keys())
    # print(val)
    # print(val.values())
    #
    # similarity[malware1] = jaccard_index
    # print(malware1, malware2, jaccard_index)
