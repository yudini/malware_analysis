
import os
import random

from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_extraction import FeatureHasher
import numpy
import pickle
from sklearn import metrics
from matplotlib import pyplot


def pecheck(filename):
    f=open(filename,"rb")
    bytes=f.read(2)
    return bytes == b'MZ'

def get_string_features(filename,min_length,hasher):

    string_features={}
    strings = os.popen("strings '{0}'".format(filename)).read()
    strings =list(set(strings.split("\n")))

    for str in strings:
        if len(str) >=min_length:
            string_features[str]=1

    hashed_features = hasher.transform([string_features])
    hashed_features = hashed_features.todense()
    hashed_features = numpy.asarray(hashed_features)
    hashed_features=hashed_features[0]

    return hashed_features


hasher = FeatureHasher(n_features=200)

#get benignware
benignware_paths=[]
for root, dirs, paths in os.walk('./data/benignware'):
    for path in paths:
        full_path=os.path.join(root,path)
        if pecheck(full_path):
            benignware_paths.append(full_path)


#get malware
malware_paths=[]
for root, dirs, paths in os.walk('./data/malware'):
    for path in paths:
        full_path=os.path.join(root,path)
        if pecheck(full_path):
            malware_paths.append(full_path)

X=[get_string_features(filename,3,hasher) for filename in malware_paths + benignware_paths]
y=[1 for i in range(len(malware_paths))] +[0 for i in range(len(benignware_paths))]

X,y=numpy.array(X), numpy.array(y)
indicies =[i for i in range(len(y))]
random.shuffle(indicies)
X,y = X[indicies], y[indicies]

splitpoint = int(len(X)/2)

training_X,test_X = X[:splitpoint], X[splitpoint:]
training_y, test_y = y[:splitpoint],y[splitpoint:]

classifier = RandomForestClassifier()
classifier.fit(training_X,training_y)

#save training data
with open('saved_classifier.pkl','wb') as f:
    pickle.dump((classifier,hasher),f)

score = classifier.predict_proba(test_X)[:,-1]
fpr,tpr,thresholds=metrics.roc_curve(test_y,score)


pyplot.plot(fpr,tpr,'r-')
pyplot.xlabel("Detector false positive rate")
pyplot.ylabel("Detector true positive rate")
pyplot.title("Detector ROC Curve")
pyplot.savefig("roc_curves.png")