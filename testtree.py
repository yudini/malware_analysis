
import os
import random

from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_extraction import FeatureHasher
from sklearn import tree
from sklearn.feature_extraction import DictVectorizer
import numpy
import pickle
from sklearn import metrics
from matplotlib import pyplot
from sklearn.metrics import f1_score
from sklearn.model_selection import KFold

def pecheck(filename):
    f=open(filename,"rb")
    bytes=f.read(2)
    return bytes == b'MZ'

def get_string_features(filename,min_length,hasher):

    string_features={}
    strings = os.popen("strings '{0}'".format(filename)).read()
    strings =list(set(strings.split("\n")))

    for str in strings:
        if len(str) >=min_length:
            string_features[str]=1

    hashed_features = hasher.transform([string_features])
    hashed_features = hashed_features.todense()
    hashed_features = numpy.asarray(hashed_features)
    hashed_features=hashed_features[0]

    return hashed_features


hasher = FeatureHasher(n_features=200)

#get benignware
benignware_paths=[]
for root, dirs, paths in os.walk('./data/benignware'):
    for path in paths:
        full_path=os.path.join(root,path)
        if pecheck(full_path):
            benignware_paths.append(full_path)


#get malware
malware_paths=[]
for root, dirs, paths in os.walk('./data/malware'):
    for path in paths:
        full_path=os.path.join(root,path)
        if pecheck(full_path):
            malware_paths.append(full_path)

X=[get_string_features(filename,3,hasher) for filename in malware_paths + benignware_paths]
y=[1 for i in range(len(malware_paths))] +[0 for i in range(len(benignware_paths))]  # mal = 1, benign = 0

X,y=numpy.array(X), numpy.array(y)
indicies =[i for i in range(len(y))]  # the number of sample
random.shuffle(indicies)
X,y = X[indicies], y[indicies]

kfold=KFold(n_splits=10)   # training : test = 9:1
result=0
for indicies_training, indicies_test in kfold.split(indicies):   # indicies_training,_test is numpy array
    training_X, training_y = X[list(indicies_training)], y[list(indicies_training)]
    test_X, test_y = X[list(indicies_test)], y[list(indicies_test)]

    # classifier =RandomForestClassifier()
    # classifier.fit(training_X,training_y)
    classifier = tree.DecisionTreeClassifier()
    classifier.fit(training_X,training_y)

    scores= classifier.predict_proba(test_X)[:,-1]  # only malware value


    #scores = classifier.predict_proba(test_X)[:, -1]  # only malware value
    y_pred = [0 if s < 0.6 else 1 for s in scores]  # 0 = benign 1= mal, 0.6 is threshold
    f1 = f1_score(test_y, y_pred)  # test_y = real value , y_pred = predict value
    print(f1)  # f1=1 is best
    result+=f1


print("avg=", result/10)
